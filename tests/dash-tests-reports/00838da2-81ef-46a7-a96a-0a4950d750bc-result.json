{"name": "test_menu_items", "status": "broken", "statusDetails": {"message": "NameError: name 'TimeoutException' is not defined", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1695d22f71f75f33a774c3856000dbc3\")>\n\n    def test_menu_items(browser: WebDriver):\n        browser.get(LOGIN_PAGE_URL)\n    \n        try:\n>           sidebar = WebDriverWait(browser,10).until(\n            EC.presence_of_element_located((By.ID, \"sidebar\")) #expected conditions\n            )\n\nOnlyDash_test.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:86: in until\n    value = method(self._driver)\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:81: in _predicate\n    return driver.find_element(*locator)\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1043762d0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...00018556bfa8 _pthread_start + 148\\\\n18  libsystem_pthread.dylib             0x0000000185566da0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=118.0.5993.117)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100588510 chromedriver + 4310288\nE       1   chromedriver                        0x00000001005804bc chromedriver + 4277436\nE       2   chromedriver                        0x00000001001b3b6c chromedriver + 293740\nE       3   chromedriver                        0x000000010018c718 chromedriver + 132888\nE       4   chromedriver                        0x0000000100220540 chromedriver + 738624\nE       5   chromedriver                        0x00000001002336f0 chromedriver + 816880\nE       6   chromedriver                        0x00000001001ecfd0 chromedriver + 528336\nE       7   chromedriver                        0x00000001001ede7c chromedriver + 532092\nE       8   chromedriver                        0x000000010054e834 chromedriver + 4073524\nE       9   chromedriver                        0x00000001005527fc chromedriver + 4089852\nE       10  chromedriver                        0x0000000100552c58 chromedriver + 4090968\nE       11  chromedriver                        0x00000001005588f8 chromedriver + 4114680\nE       12  chromedriver                        0x0000000100553234 chromedriver + 4092468\nE       13  chromedriver                        0x000000010052d604 chromedriver + 3937796\nE       14  chromedriver                        0x000000010056fee8 chromedriver + 4210408\nE       15  chromedriver                        0x0000000100570064 chromedriver + 4210788\nE       16  chromedriver                        0x0000000100580134 chromedriver + 4276532\nE       17  libsystem_pthread.dylib             0x000000018556bfa8 _pthread_start + 148\nE       18  libsystem_pthread.dylib             0x0000000185566da0 thread_start + 8\n\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1695d22f71f75f33a774c3856000dbc3\")>\n\n    def test_menu_items(browser: WebDriver):\n        browser.get(LOGIN_PAGE_URL)\n    \n        try:\n            sidebar = WebDriverWait(browser,10).until(\n            EC.presence_of_element_located((By.ID, \"sidebar\")) #expected conditions\n            )\n    \n            toolbar_items = {\n                \"Home\":\"home\",\n                \"My Content\":\"mycontent\",\n                \"Settings\":\"Settings\",\n                \"My Profile\":\"profile\",\n                \"Logout\":\"logout\",\n            }\n    \n            for item_text, item_id in toolbar_items.items():\n                item = sidebar.find_element(By.LINK_TEXT, item_text)\n                assert item.is_displayed(), f\"{item_text} link is missing\"\n>       except TimeoutException:\nE       NameError: name 'TimeoutException' is not defined\n\nOnlyDash_test.py:62: NameError"}, "start": 1698887346932, "stop": 1698887348047, "uuid": "c0ed5fc7-b795-4217-9d63-709e2a55dc4a", "historyId": "09b95939580c2fa8b3779231bae81224", "testCaseId": "09b95939580c2fa8b3779231bae81224", "fullName": "OnlyDash_test#test_menu_items", "labels": [{"name": "suite", "value": "OnlyDash_test"}, {"name": "host", "value": "Dhairyas-MacBook-Air-3.local"}, {"name": "thread", "value": "19443-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "OnlyDash_test"}]}