{"name": "test_share_pdf", "status": "broken", "statusDetails": {"message": "NameError: name 'TimeoutException' is not defined", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"953d9bc89a370902aaa4c1d40b0b95f9\")>\n\n    def test_share_pdf(browser: WebDriver):\n        browser.get(LOGIN_PAGE_URL)\n    \n        try:\n            note_cards = WebDriverWait(browser, 10).until(\n                EC.presence_of_all_elements_located((By.CLASS_NAME, \"note-card\"))\n            )\n    \n            share_buttons = browser.find_elements(By.CLASS_NAME, \"share-btn\")\n            if share_buttons:\n                share_buttons[0].click()\n            else:\n                assert False, \"No share buttons found\"\n    \n            browser.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n    \n            email_input = WebDriverWait(browser, 10).until(\n                EC.presence_of_element_located((By.ID, \"email\"))\n            )\n            email_input.send_keys(email_add)\n    \n            submit_button = browser.find_element(By.XPATH, \"//input[@type='submit']\")\n>           submit_button.click()\n\ncontent_test.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10698ad10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...00018556bfa8 _pthread_start + 148\\\\n21  libsystem_pthread.dylib             0x0000000185566da0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (592, 2378)\nE         (Session info: chrome=119.0.6045.199)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104df2004 chromedriver + 4169732\nE       1   chromedriver                        0x0000000104de9ff8 chromedriver + 4136952\nE       2   chromedriver                        0x0000000104a3f500 chromedriver + 292096\nE       3   chromedriver                        0x0000000104a8b3f8 chromedriver + 603128\nE       4   chromedriver                        0x0000000104a894e4 chromedriver + 595172\nE       5   chromedriver                        0x0000000104a87118 chromedriver + 586008\nE       6   chromedriver                        0x0000000104a86174 chromedriver + 582004\nE       7   chromedriver                        0x0000000104a7a4f8 chromedriver + 533752\nE       8   chromedriver                        0x0000000104a79db4 chromedriver + 531892\nE       9   chromedriver                        0x0000000104abf818 chromedriver + 817176\nE       10  chromedriver                        0x0000000104a785e8 chromedriver + 525800\nE       11  chromedriver                        0x0000000104a794b8 chromedriver + 529592\nE       12  chromedriver                        0x0000000104db8334 chromedriver + 3932980\nE       13  chromedriver                        0x0000000104dbc970 chromedriver + 3950960\nE       14  chromedriver                        0x0000000104da0774 chromedriver + 3835764\nE       15  chromedriver                        0x0000000104dbd478 chromedriver + 3953784\nE       16  chromedriver                        0x0000000104d92ab4 chromedriver + 3779252\nE       17  chromedriver                        0x0000000104dd9914 chromedriver + 4069652\nE       18  chromedriver                        0x0000000104dd9a90 chromedriver + 4070032\nE       19  chromedriver                        0x0000000104de9c70 chromedriver + 4136048\nE       20  libsystem_pthread.dylib             0x000000018556bfa8 _pthread_start + 148\nE       21  libsystem_pthread.dylib             0x0000000185566da0 thread_start + 8\n\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"953d9bc89a370902aaa4c1d40b0b95f9\")>\n\n    def test_share_pdf(browser: WebDriver):\n        browser.get(LOGIN_PAGE_URL)\n    \n        try:\n            note_cards = WebDriverWait(browser, 10).until(\n                EC.presence_of_all_elements_located((By.CLASS_NAME, \"note-card\"))\n            )\n    \n            share_buttons = browser.find_elements(By.CLASS_NAME, \"share-btn\")\n            if share_buttons:\n                share_buttons[0].click()\n            else:\n                assert False, \"No share buttons found\"\n    \n            browser.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n    \n            email_input = WebDriverWait(browser, 10).until(\n                EC.presence_of_element_located((By.ID, \"email\"))\n            )\n            email_input.send_keys(email_add)\n    \n            submit_button = browser.find_element(By.XPATH, \"//input[@type='submit']\")\n            submit_button.click()\n    \n            time.sleep(20)\n    \n            assert browser.current_url == email_sent_URL, \"Browser did not redirect from the index URL\"\n    \n>       except TimeoutException:\nE       NameError: name 'TimeoutException' is not defined\n\ncontent_test.py:106: NameError"}, "start": 1701568603231, "stop": 1701568605149, "uuid": "69021880-6662-4c85-b911-7660191387db", "historyId": "42fa551902151b257d8a1d3e14e242bd", "testCaseId": "42fa551902151b257d8a1d3e14e242bd", "fullName": "content_test#test_share_pdf", "labels": [{"name": "suite", "value": "content_test"}, {"name": "host", "value": "Dhairyas-MacBook-Air-3.local"}, {"name": "thread", "value": "93493-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "content_test"}]}