{"name": "test_my_content", "status": "broken", "statusDetails": {"message": "NameError: name 'TimeoutException' is not defined", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf71563f8d1f80aa5aab3d6a083eb84a\")>\n\n    def test_my_content(browser: WebDriver):\n        browser.get(LOGIN_PAGE_URL)\n        try:\n>           notes = WebDriverWait(browser,10).until(\n            EC.presence_of_element_located((By.CLASS_NAME, \"notes-container\")) #expected conditions\n            )\n\ncontent_test.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:86: in until\n    value = method(self._driver)\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:81: in _predicate\n    return driver.find_element(*locator)\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1062e9590>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...00018556bfa8 _pthread_start + 148\\\\n17  libsystem_pthread.dylib             0x0000000185566da0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=119.0.6045.199)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000103136004 chromedriver + 4169732\nE       1   chromedriver                        0x000000010312dff8 chromedriver + 4136952\nE       2   chromedriver                        0x0000000102d83500 chromedriver + 292096\nE       3   chromedriver                        0x0000000102d5c2d8 chromedriver + 131800\nE       4   chromedriver                        0x0000000102deff68 chromedriver + 737128\nE       5   chromedriver                        0x0000000102e02fac chromedriver + 815020\nE       6   chromedriver                        0x0000000102dbc5e8 chromedriver + 525800\nE       7   chromedriver                        0x0000000102dbd4b8 chromedriver + 529592\nE       8   chromedriver                        0x00000001030fc334 chromedriver + 3932980\nE       9   chromedriver                        0x0000000103100970 chromedriver + 3950960\nE       10  chromedriver                        0x00000001030e4774 chromedriver + 3835764\nE       11  chromedriver                        0x0000000103101478 chromedriver + 3953784\nE       12  chromedriver                        0x00000001030d6ab4 chromedriver + 3779252\nE       13  chromedriver                        0x000000010311d914 chromedriver + 4069652\nE       14  chromedriver                        0x000000010311da90 chromedriver + 4070032\nE       15  chromedriver                        0x000000010312dc70 chromedriver + 4136048\nE       16  libsystem_pthread.dylib             0x000000018556bfa8 _pthread_start + 148\nE       17  libsystem_pthread.dylib             0x0000000185566da0 thread_start + 8\n\n/opt/homebrew/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf71563f8d1f80aa5aab3d6a083eb84a\")>\n\n    def test_my_content(browser: WebDriver):\n        browser.get(LOGIN_PAGE_URL)\n        try:\n            notes = WebDriverWait(browser,10).until(\n            EC.presence_of_element_located((By.CLASS_NAME, \"notes-container\")) #expected conditions\n            )\n            assert notes.is_displayed(), \"Form is missing\"\n>       except TimeoutException:\nE       NameError: name 'TimeoutException' is not defined\n\ncontent_test.py:72: NameError"}, "start": 1701566097220, "stop": 1701566097905, "uuid": "447fc48d-5f59-437b-9542-68b18f20f3dc", "historyId": "891a5eff2cfdb9783cf8ff23bdb1fa1a", "testCaseId": "891a5eff2cfdb9783cf8ff23bdb1fa1a", "fullName": "content_test#test_my_content", "labels": [{"name": "suite", "value": "content_test"}, {"name": "host", "value": "Dhairyas-MacBook-Air-3.local"}, {"name": "thread", "value": "87909-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "content_test"}]}